initialize() {
	defineConstant("L", 1e8);           // chromosome length
	defineConstant("msatCount",2970);    // number of microsats
	defineConstant("msatMu", 1e-5);   // mutation rate per microsat
	defineConstant("msatUnique", T);    // T = unique msats, F = lineages
	
	defineConstant("msatCount1",10);    // number of microsats
	defineConstant("msatMu1", 1e-5);   // mutation rate per microsat
	defineConstant("msatUnique1", T);    // T = unique msats, F = lineages
	
	
   defineConstant("msatCount2",10);    // number of microsats
	defineConstant("msatMu2", 1e-5);   // mutation rate per microsat
	defineConstant("msatUnique2", T);    // T = unique msats, F = lineages
	
	
   defineConstant("msatCount3",10);    // number of microsats
	defineConstant("msatMu3", 1e-5);   // mutation rate per microsat
	defineConstant("msatUnique3", T);    // T = unique msats, F = lineages
	
	
	initializeMutationRate(0);
	initializeMutationType("m9", 0.5, "f", 0.0);  // neutral
	initializeGenomicElementType("g1", m9, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(0);
	
	// microsatellite mutation type; also neutral, 
	initializeMutationType("m0", 0.5, "f", 0.0);
	m0.convertToSubstitution = F;
	// microsatellite mutation type; beneficial in pop1
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = F;
	// microsatellite mutation type; beneficial in pop2
	initializeMutationType("m2", 0.5, "f", 0.0);
	m2.convertToSubstitution = F;
	// microsatellite mutation type;  beneficial in pop3
	initializeMutationType("m3", 0.5, "f", 0.0);
	m3.convertToSubstitution = F;
	
}
///
/// Demography:


1 late() {
   sim.addSubpop("p1", asInteger(round(7310.370867595234)));
	p1.individuals.tag = rbinom(7310, 1, 0.01); // size = number of trial
	
	// create some microsatellites at random positions
	genomes = sim.subpopulations.genomes;
	positions = rdunif(msatCount, 0, L-1);
	repeats = rpois(msatCount, 1) ;
	
	for (msatIndex in 0:(msatCount-1))
	{
		pos = positions[msatIndex];
		mut = genomes.addNewDrawnMutation(m0, pos);
		mut.tag = repeats[msatIndex];//
	}
	
	// remember the microsat positions for later
	defineConstant("msatPositions", positions);
}



1 late() {	
	//m1
	genomes1 = sim.subpopulations.genomes;
	positions1 = rdunif(msatCount1, 0, L-1);
	repeats1 = rpois(msatCount1, 1);
	
	for (msatIndex1 in 0:(msatCount1-1))
	{
		pos1 = positions1[msatIndex1];
		mut1 = genomes1.addNewDrawnMutation(m1, pos1);
		mut1.tag = repeats1[msatIndex1];//
	}
	
	// remember the microsat positions for later
	defineConstant("msatPositions1", positions1);
}

1 late() {
	//m2
	genomes2 = sim.subpopulations.genomes;
	positions2 = rdunif(msatCount2, 0, L-1);
	repeats2 = rpois(msatCount2, 1);
	
	for (msatIndex2 in 0:(msatCount2-1))
	{
		pos2 = positions2[msatIndex2];
		mut2 = genomes2.addNewDrawnMutation(m2, pos2);
		mut2.tag = repeats2[msatIndex2];//
	}
	
	// remember the microsat positions for later
	defineConstant("msatPositions2", positions2);
}	

1 late() {	
	//m3
	genomes3 = sim.subpopulations.genomes;
	positions3 = rdunif(msatCount3, 0, L-1);
	repeats3 = rpois(msatCount3, 1);
	
	for (msatIndex3 in 0:(msatCount3-1))
	{
		pos3 = positions3[msatIndex3];
		mut3 = genomes3.addNewDrawnMutation(m3, pos3);
		mut3.tag = repeats3[msatIndex3];//
	}
	
	// remember the microsat positions for later
	defineConstant("msatPositions3", positions3);
}




modifyChild() {
	// mutate microsatellites with rate msatMu
	for (genome in child.genomes)
	{
		mutCount = rpois(1, msatMu * msatCount);
		
		if (mutCount)
		{
			mutSites = sample(msatPositions, mutCount);
			msats = genome.mutationsOfType(m0);
			
			for (mutSite in mutSites)
			{
				msat = msats[msats.position == mutSite];
				repeats = msat.tag;
				
				// modify the number of repeats by adding -1 or +1
				repeats = repeats + asInteger(round(rnorm(1,0,0.5)));
				if (repeats <1)
					next;			
				if (repeats >8)
					next;
				
				// if we're uniquing microsats, do so now
				if (msatUnique)
				{
					all_msats = sim.mutationsOfType(m0);
					msatsAtSite = all_msats[all_msats.position == mutSite];
					matchingMut = msatsAtSite[msatsAtSite.tag == repeats];
					
					if (matchingMut.size() == 1)
					{
						genome.removeMutations(msat);
						genome.addMutations(matchingMut);
						next;
					}
				}
				
				// make a new mutation with the new repeat count
				genome.removeMutations(msat);
				msat = genome.addNewDrawnMutation(m0, mutSite);
				msat.tag = repeats;
			}
		}
	}
		return T;
}

modifyChild() {
   for (genome in child.genomes)
	{
		mutCount1 = rpois(1, msatMu1 * msatCount1);
	
		if (mutCount1)
		{
			mutSites1 = sample(msatPositions1, mutCount1);
			msats1 = genome.mutationsOfType(m1);
			
			for (mutSite1 in mutSites1)
			{
				msat1 = msats1[msats1.position == mutSite1];
				repeats1 = msat1.tag;
				
				// modify the number of repeats by adding -1 or +1
				repeats1 = repeats1 + asInteger(round(rnorm(1,0,0.5)));
				if (repeats1 < 1)
					next;				
				if (repeats1 > 8)
					next;
				
				// if we're uniquing microsats, do so now
				if (msatUnique1)
				{
					all_msats1 = sim.mutationsOfType(m1);
					msatsAtSite1 = all_msats1[all_msats1.position == mutSite1];
					matchingMut1 = msatsAtSite1[msatsAtSite1.tag == repeats1];
					
					if (matchingMut1.size() == 1)
					{
						genome.removeMutations(msat1);
						genome.addMutations(matchingMut1);
						next;
					}
				}
				
				// make a new mutation with the new repeat count
				genome.removeMutations(msat1);
				msat1 = genome.addNewDrawnMutation(m1, mutSite1);
				msat1.tag = repeats1;
			}
		}
	}
	
	return T;
}

modifyChild() {	
		for (genome in child.genomes)
	{
		mutCount2 = rpois(1, msatMu2 * msatCount2);
		
		if (mutCount2)
		{
			mutSites2 = sample(msatPositions2, mutCount2);
			msats2 = genome.mutationsOfType(m2);
			
			for (mutSite2 in mutSites2)
			{
				msat2 = msats2[msats2.position == mutSite2];
				repeats2 = msat2.tag;
				
				// modify the number of repeats by adding -1 or +1
				repeats2 = repeats2 + asInteger(round(rnorm(1,0,0.5)));
				if (repeats2 < 1)
					next;			
				if (repeats2 > 8)
					next;
				
				// if we're uniquing microsats, do so now
				if (msatUnique2)
				{
					all_msats2 = sim.mutationsOfType(m2);
					msatsAtSite2 = all_msats2[all_msats2.position == mutSite2];
					matchingMut2 = msatsAtSite2[msatsAtSite2.tag == repeats2];
					
					if (matchingMut2.size() == 1)
					{
						genome.removeMutations(msat2);
						genome.addMutations(matchingMut2);
						next;
					}
				}
				
				// make a new mutation with the new repeat count
				genome.removeMutations(msat2);
				msat2 = genome.addNewDrawnMutation(m2, mutSite2);
				msat2.tag = repeats2;
			}
		}
	}
	
	return T;
}

modifyChild() {	
		for (genome in child.genomes)
	{
		mutCount3 = rpois(1, msatMu3 * msatCount3);
		
		if (mutCount3)
		{
			mutSites3 = sample(msatPositions3, mutCount3);
			msats3 = genome.mutationsOfType(m3);
			
			for (mutSite3 in mutSites3)
			{
				msat3 = msats3[msats3.position == mutSite3];
				repeats3 = msat3.tag;
				
				// modify the number of repeats by adding -1 or +1
				repeats3 = repeats3 + asInteger(round(rnorm(1,0,0.5)));				
				if (repeats3 < 1)
					next;
				if (repeats3 > 8)
					next;
				
				// if we're uniquing microsats, do so now
				if (msatUnique3)
				{
					all_msats3 = sim.mutationsOfType(m3);
					msatsAtSite3 = all_msats3[all_msats3.position == mutSite3];
					matchingMut3 = msatsAtSite3[msatsAtSite3.tag == repeats3];
					
					if (matchingMut3.size() == 1)
					{
						genome.removeMutations(msat3);
						genome.addMutations(matchingMut3);
						next;
					}
				}
				
				// make a new mutation with the new repeat count
				genome.removeMutations(msat3);
				msat3 = genome.addNewDrawnMutation(m3, mutSite3);
				msat3.tag = repeats3;
			}
		}
	}
	
	return T;
}


73105 /* end burn-in */ {
	p1.setSubpopulationSize(asInteger(round(14474.54608753566)));
}

76968 /* split p2 from p1 */ {
	sim.addSubpopSplit("p2", asInteger(round(1861.288190027689)), p1);
	p1.setMigrationRates(c(p2), c(15.24422112e-5));
	p2.setMigrationRates(c(p1), c(15.24422112e-5));
}

78084 /* split p3 from p2 */ {
	sim.addSubpopSplit("p3", asInteger(round(553.8181989)), p2);
	p2.setSubpopulationSize(asInteger(round(1032.1046957333444)));
	p1.setMigrationRates(c(p2, p3), c(2.54332678e-5, 0.7770583877e-5));
	p2.setMigrationRates(c(p1, p3), c(2.54332678e-5, 3.115817913e-5));
	p3.setMigrationRates(c(p1, p2), c(0.7770583877e-5, 3.115817913e-5));
}

fitness(m1, p1) {return 1.005; }//  
fitness(m2, p2) {return 1.005; }//  
fitness(m3, p3) {return 1.005; }//  

78084:79024 {
	t = sim.generation - 78084;
	p2_size = round(1032.1046957333444 * (1 + 0.003784324268)^t); 
	p3_size = round(553.8181989 * (1 + 0.004780219543)^t);
	p2.setSubpopulationSize(asInteger(p2_size));
	p3.setSubpopulationSize(asInteger(p3_size));
}

// 0 to 0 igai no baai wake ga iru?


79024 late() {
	p1.outputVCFSample(100);
	p2.outputVCFSample(100);
	p3.outputVCFSample(100);
	
	//writeFile("~/Desktop/writefile.txt", paste(p1.outputMSSample(216),sep=" "), append=T); // konoyouni output file ni shitai
}




// bcftools norm -m+ output91.p1.vcf -o outout.vcf